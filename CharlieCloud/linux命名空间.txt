目前linux实现了6种命名空间，每一个namespace是包装了一些全局系统资源的抽象集合，这一抽象集合使在进程的命名空间重可以看到全局系统资源。

mount namespaces
用于隔离一组进程看到的文件系统挂载点集合，即处于不同mount命名空间的进程看到的文件系统层次很可能不同。mount() unmount()系统调用的影响不再是全局而只影响其调用进程指向的命名空间。

UTS namespaces
(UTS来源于传递给unames()系统调用的参数struct utsname，后者名字来源于UNIX Time-sharing System)
隔离了两个系统变量，系统节点名和域名。UTS赋予每个容器各自的主机名和网络信息服务名(NIS Network Information Service)，这使得初始化和配置脚本能够根据不同的名字进行裁剪。

IPC namespaces
隔离进程间通信资源，具体是System V IPC objects and POSIX message queues。这些机制共同点是由其特点而不是文件系统路径名标识。每一个IPC命名空间有其自己的System V IPC标识符和POSIX消息队列文件系统。

PID namespaces
隔离进程ID号命名空间，即位于不同进程ID命名空间的进程可以有相同的进程ID号，PID命名空间的最大好处是在主机之间移植container时，可以保留container内的ID号，PID命名空间允许每个container拥有自己的init进程（ID=1），init进程是所有进程的祖先，负责系统启动时的初始化和作为孤儿进程的父进程。从特殊角度看，就是一个进程有两个ID，一个ID属于PID命名空间，一个ID属于PID命名空间之外的主机系统，此外PID命名空间能够被嵌套。

Network namespaces
隔离和网络有关的资源，使得每个网络命名空间有自己的网络设备、IP地址、IP路由表、/proc/net目录，端口号等。

User namespaces
隔离用户和组ID空间，即一个进程的用户和组ID在用户命名空间之外可以不同于命名空间之内的ID。最特别的是一个用户ID在命名空间之外非特权，而在命名空间内却可以是具有特权的，这就意味着在命名空间内拥有全部的特权权限，在命名空间之外则不是这样。
自Linux3.8开始，非特权进程可以创建用户命名空间，由于非特权进程在user命名空间内具有root权限，命名空间内非特权应用程序可以使用以前只有root能够使用的一些功能。