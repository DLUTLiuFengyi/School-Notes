加速比=串行程序执行的时间/并行程序执行的时间

Amdahl和Gustafson-Barsis定律

阿姆达尔定律用于计算算法并行化后可获得的最大预期改进。S=1/(1-a+a/k)，其中a是并行计算部分所占比例，k是并行处理结点个数或性能提升比例，S是加速比。该定律描述固定负载情况下并行处理效果的加速比。
此定律没有考虑到并行执行时的锁竞争、线程管理等消耗，最重要的是此定律没有考虑在计算机核数增加时，是否处理的数据也会更多，而只计算了固定核数固定任务的加速比。

古斯塔夫森定律相比于阿姆达尔定律，认为在计算机核数增加后所处理的任务就会更多。
说明处理器数量，串行比例和加速比之间的关系。只要有足够的并行化，那么加速比和CPU个数成正比。
S=k-f*(k-1)，其中k是并行处理结点个数或性能提升比例或计算机核数，f是串行代码执行时间所占百分比
串行比例f=串行时间 / (串行时间+并行时间)

多个并行计算节点
SIMD：计算节点在给定的数据上用给定的模式进行搜索，然后将搜索结果发给服务器，服务器汇总，称为高吞吐计算，属于SIMD范畴
MIMD：也是分成若干并行子任务，但子任务间联系很紧密，需要大量数据交换，这叫分布式的高性能计算，属于MIMD范畴

Beowulf集群
MIMD

COW
SIMD

并行进程间通信的高速网Myrinet和Giganet上的消息传递由PVM和MPI来实现进程间通信
PVM和MPI是并行编程库（消息传递api）

并行计算的两种组织硬件实现方式：
非共享内存——需要消息传递通信（Beowulf集群）
共享内存——通过内存访问通信（SMP计算机）

在并行程序间传递并发有两种方法：
使用处理器间的消息传递MPI
使用操作系统的线程Thread

消息传递需要在cpu间拷贝数据，而线程却可以在cpu间共享数据。消息传递也可以在线程上实现，且消息传递即可以用于集群系统也可以用于SMP系统。和线程相比，在smp系统上使用消息传递的优点在于可以很方便地把smp上的应用移植到集群系统上。线程最大特点是线程间是共享数据，因此在smp系统上工作的更好，而linux本身也支持Posix线程。但使用线程最大缺点是很难将线程扩展到smp系统之外。

               SMP系统性能   集群系统性能   扩展性
消息传递  好                    很好                很好
线程        很好                 差                    差

为了达到高带宽，通常需要使用交换机

分布式文件系统优势：服务器名称或地址不是文件路径的一部分
分布式文件系统只有一份数据，很容易发生单点失效，建立在共享磁盘上的并行文件系统可以克服分布式文件系统的这些缺点。
并行文件系统优势：克服单点失效，有多个访问点彼此可以协调负载，容易扩展容量和访问带宽

CPU消耗型应用需要稍微快一点的cpu和高速低延迟网络
I/O消耗性应用需要稍微慢一点的cpu和快速以太网

对于I/O消耗性应用，如果两个并行系统具有相同的cpu指标，慢cpu和相应具有低速cpu间通信网络的系统反而具有较好的功能
Eadline-Dedkov法则（？）